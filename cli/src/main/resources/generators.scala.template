package generated

import javax.xml.datatype
import org.scalacheck.Gen
import org.scalacheck.Arbitrary
import org.joda.time._
import com.fortysevendeg.scalacheck.datetime.instances.joda._
import com.fortysevendeg.scalacheck.datetime.GenDateTime.genDateTimeWithinRange
import javax.xml.datatype.XMLGregorianCalendar
import javax.xml.datatype.DatatypeFactory
import javax.xml.datatype.DatatypeConstants
import com.fortysevendeg.scalacheck.datetime.joda.granularity.hours

object generators {
  val stringGen: Gen[String] = Arbitrary.arbString.arbitrary
  val intGen: Gen[Int] = Arbitrary.arbInt.arbitrary
  val byteGen: Gen[Byte] = Arbitrary.arbByte.arbitrary
  val longGen: Gen[Long] = Arbitrary.arbLong.arbitrary
  val bigIntGen: Gen[BigInt] = Arbitrary.arbBigInt.arbitrary
  val doubleGen: Gen[Double] = Arbitrary.arbDouble.arbitrary
  val floatGen: Gen[Float] = Arbitrary.arbFloat.arbitrary
  val booleanGen: Gen[Boolean] = Arbitrary.arbBool.arbitrary
  val shortGen: Gen[Short] = Arbitrary.arbShort.arbitrary
  val decimalGen: Gen[BigDecimal] = Arbitrary.arbBigDecimal.arbitrary

  // Date and DateTime generators check for ZONE
  def jodaDateTimeGen(from: DateTime, range: Period): Gen[DateTime] =
    genDateTimeWithinRange(from, range)
  def dateTimeGen(dateTimeGen: Gen[DateTime]): Gen[XMLGregorianCalendar] =
    for { date <- dateTimeGen } yield DatatypeFactory
      .newInstance()
      .newXMLGregorianCalendar(date.toGregorianCalendar)
  val pastDateTimeGen: Gen[XMLGregorianCalendar] = xml(
    genDateTimeWithinRange(DateTime.now, Period.years(-100))
  )
  def jodaDateGen(from: DateTime, range: Period): Gen[DateTime] =
    genDateTimeWithinRange(from, range)
  def xml(dateGen: Gen[DateTime]): Gen[XMLGregorianCalendar] =
    for { date <- dateGen } yield DatatypeFactory
      .newInstance()
      .newXMLGregorianCalendarDate(
        date.getYear,
        date.getMonthOfYear,
        date.getDayOfMonth,
        DatatypeConstants.FIELD_UNDEFINED
      )
  val pastDateGen: Gen[XMLGregorianCalendar] = xml(
    genDateTimeWithinRange(DateTime.now, Period.years(-100))
  )
  val dateGen: Gen[XMLGregorianCalendar] = pastDateGen //FIXME
  val timeGen: Gen[XMLGregorianCalendar] = pastDateGen //FIXME
  val dateTimeGen: Gen[XMLGregorianCalendar] = pastDateGen //FIXME
  val durationGen: Gen[datatype.Duration] = ??? //FIXME
}
